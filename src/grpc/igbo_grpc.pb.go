// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: igbo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IgboDBClient is the client API for IgboDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IgboDBClient interface {
	OperationsStream(ctx context.Context, opts ...grpc.CallOption) (IgboDB_OperationsStreamClient, error)
	Create(ctx context.Context, in *Objects, opts ...grpc.CallOption) (*OperationResults, error)
	Update(ctx context.Context, in *Objects, opts ...grpc.CallOption) (*OperationResults, error)
	Delete(ctx context.Context, in *ObjectKeys, opts ...grpc.CallOption) (*OperationResults, error)
	Retrieve(ctx context.Context, in *ObjectKeys, opts ...grpc.CallOption) (*Objects, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*Objects, error)
}

type igboDBClient struct {
	cc grpc.ClientConnInterface
}

func NewIgboDBClient(cc grpc.ClientConnInterface) IgboDBClient {
	return &igboDBClient{cc}
}

func (c *igboDBClient) OperationsStream(ctx context.Context, opts ...grpc.CallOption) (IgboDB_OperationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &IgboDB_ServiceDesc.Streams[0], "/IgboDB/OperationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &igboDBOperationsStreamClient{stream}
	return x, nil
}

type IgboDB_OperationsStreamClient interface {
	Send(*OperationRequest) error
	Recv() (*OperationResponse, error)
	grpc.ClientStream
}

type igboDBOperationsStreamClient struct {
	grpc.ClientStream
}

func (x *igboDBOperationsStreamClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *igboDBOperationsStreamClient) Recv() (*OperationResponse, error) {
	m := new(OperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *igboDBClient) Create(ctx context.Context, in *Objects, opts ...grpc.CallOption) (*OperationResults, error) {
	out := new(OperationResults)
	err := c.cc.Invoke(ctx, "/IgboDB/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igboDBClient) Update(ctx context.Context, in *Objects, opts ...grpc.CallOption) (*OperationResults, error) {
	out := new(OperationResults)
	err := c.cc.Invoke(ctx, "/IgboDB/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igboDBClient) Delete(ctx context.Context, in *ObjectKeys, opts ...grpc.CallOption) (*OperationResults, error) {
	out := new(OperationResults)
	err := c.cc.Invoke(ctx, "/IgboDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igboDBClient) Retrieve(ctx context.Context, in *ObjectKeys, opts ...grpc.CallOption) (*Objects, error) {
	out := new(Objects)
	err := c.cc.Invoke(ctx, "/IgboDB/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igboDBClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*Objects, error) {
	out := new(Objects)
	err := c.cc.Invoke(ctx, "/IgboDB/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IgboDBServer is the server API for IgboDB service.
// All implementations must embed UnimplementedIgboDBServer
// for forward compatibility
type IgboDBServer interface {
	OperationsStream(IgboDB_OperationsStreamServer) error
	Create(context.Context, *Objects) (*OperationResults, error)
	Update(context.Context, *Objects) (*OperationResults, error)
	Delete(context.Context, *ObjectKeys) (*OperationResults, error)
	Retrieve(context.Context, *ObjectKeys) (*Objects, error)
	Query(context.Context, *QueryRequest) (*Objects, error)
	mustEmbedUnimplementedIgboDBServer()
}

// UnimplementedIgboDBServer must be embedded to have forward compatible implementations.
type UnimplementedIgboDBServer struct {
}

func (UnimplementedIgboDBServer) OperationsStream(IgboDB_OperationsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OperationsStream not implemented")
}
func (UnimplementedIgboDBServer) Create(context.Context, *Objects) (*OperationResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIgboDBServer) Update(context.Context, *Objects) (*OperationResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIgboDBServer) Delete(context.Context, *ObjectKeys) (*OperationResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIgboDBServer) Retrieve(context.Context, *ObjectKeys) (*Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedIgboDBServer) Query(context.Context, *QueryRequest) (*Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedIgboDBServer) mustEmbedUnimplementedIgboDBServer() {}

// UnsafeIgboDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IgboDBServer will
// result in compilation errors.
type UnsafeIgboDBServer interface {
	mustEmbedUnimplementedIgboDBServer()
}

func RegisterIgboDBServer(s grpc.ServiceRegistrar, srv IgboDBServer) {
	s.RegisterService(&IgboDB_ServiceDesc, srv)
}

func _IgboDB_OperationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IgboDBServer).OperationsStream(&igboDBOperationsStreamServer{stream})
}

type IgboDB_OperationsStreamServer interface {
	Send(*OperationResponse) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type igboDBOperationsStreamServer struct {
	grpc.ServerStream
}

func (x *igboDBOperationsStreamServer) Send(m *OperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *igboDBOperationsStreamServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IgboDB_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Objects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgboDBServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IgboDB/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgboDBServer).Create(ctx, req.(*Objects))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgboDB_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Objects)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgboDBServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IgboDB/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgboDBServer).Update(ctx, req.(*Objects))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgboDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgboDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IgboDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgboDBServer).Delete(ctx, req.(*ObjectKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgboDB_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgboDBServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IgboDB/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgboDBServer).Retrieve(ctx, req.(*ObjectKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgboDB_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgboDBServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IgboDB/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgboDBServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IgboDB_ServiceDesc is the grpc.ServiceDesc for IgboDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IgboDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IgboDB",
	HandlerType: (*IgboDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IgboDB_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IgboDB_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IgboDB_Delete_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _IgboDB_Retrieve_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _IgboDB_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OperationsStream",
			Handler:       _IgboDB_OperationsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "igbo.proto",
}
